     1                                  %macro	syscall1 2
     2                                  	mov	ebx, %2
     3                                  	mov	eax, %1
     4                                  	int	0x80
     5                                  %endmacro
     6                                  
     7                                  %macro	syscall3 4
     8                                  	mov	edx, %4
     9                                  	mov	ecx, %3
    10                                  	mov	ebx, %2
    11                                  	mov	eax, %1
    12                                  	int	0x80
    13                                  %endmacro
    14                                  
    15                                  %macro  exit 1
    16                                  	syscall1 1, %1
    17                                  %endmacro
    18                                  
    19                                  %macro  write 3
    20                                  	syscall3 4, %1, %2, %3
    21                                  %endmacro
    22                                  
    23                                  %macro  read 3
    24                                  	syscall3 3, %1, %2, %3
    25                                  %endmacro
    26                                  
    27                                  %macro  open 3
    28                                  	syscall3 5, %1, %2, %3
    29                                  %endmacro
    30                                  
    31                                  %macro  lseek 3
    32                                  	syscall3 19, %1, %2, %3
    33                                  %endmacro
    34                                  
    35                                  %macro  close 1
    36                                  	syscall1 6, %1
    37                                  %endmacro
    38                                  
    39                                  %define	STK_RES	200
    40                                  %define	RDWR	2
    41                                  %define	SEEK_END 2
    42                                  %define SEEK_SET 0
    43                                  
    44                                  %define ENTRY		24
    45                                  %define PHDR_start	28
    46                                  %define	PHDR_size	32
    47                                  %define PHDR_memsize	20	
    48                                  %define PHDR_filesize	16
    49                                  %define	PHDR_offset	4
    50                                  %define	PHDR_vaddr	8
    51                                  %define ELFHDR_size 52
    52                                  %define ELFHDR_phoff	28
    53                                  ;my defines
    54                                  
    55                                  %define STDOUT		1
    56                                  %define FD dword [ebp-4]
    57                                  %define ELF_header ebp-56
    58                                  %define FIleSize dword [ebp-60]
    59                                  %define original_entry_point ebp-64
    60                                  
    61                                  	global _start
    62                                  
    63                                  	section .text
    64                                  _start:	
    65 00000000 55                      	push	ebp
    66 00000001 89E5                    	mov	ebp, esp
    67 00000003 81ECC8000000            	sub	esp, STK_RES            ; Set up ebp and reserve space on the stack for local storage
    68                                  	
    69                                  open_file:
    70 00000009 E8DD000000              	call get_my_loc
    71 0000000E 83E965                  	sub ecx, next_i-FileName
    72 00000011 89C8                    	mov eax, ecx
    73                                  	open eax, RDWR, 0x777
    73                              <1>  syscall3 5, %1, %2, %3
    73 00000013 BA77070000          <2>  mov edx, %4
    73 00000018 B902000000          <2>  mov ecx, %3
    73 0000001D 89C3                <2>  mov ebx, %2
    73 0000001F B805000000          <2>  mov eax, %1
    73 00000024 CD80                <2>  int 0x80
    74 00000026 83F8FF                  	cmp eax, -1
    75 00000029 7E39                    	jle fail
    76 0000002B 89C7                    	mov edi, eax	; edi = eax = fd
    77                                  
    78                                  check_magic:
    79                                  	read edi, ebp, 4
    79                              <1>  syscall3 3, %1, %2, %3
    79 0000002D BA04000000          <2>  mov edx, %4
    79 00000032 89E9                <2>  mov ecx, %3
    79 00000034 89FB                <2>  mov ebx, %2
    79 00000036 B803000000          <2>  mov eax, %1
    79 0000003B CD80                <2>  int 0x80
    80 0000003D 83F8FF                  	cmp eax, -1	;check error
    81 00000040 89E9                    	mov ecx, ebp
    82 00000042 7E20                    	jle fail	;eax >= -1
    83 00000044 81397F454C46            	cmp dword[ecx], 0x464C457F
    84 0000004A 7518                    	jne fail
    85                                  
    86                                  print_success:
    87                                  	write 1, OutStr, 31
    87                              <1>  syscall3 4, %1, %2, %3
    87 0000004C BA1F000000          <2>  mov edx, %4
    87 00000051 B9[99000000]        <2>  mov ecx, %3
    87 00000056 BB01000000          <2>  mov ebx, %2
    87 0000005B B804000000          <2>  mov eax, %1
    87 00000060 CD80                <2>  int 0x80
    88 00000062 EB1B                    	jmp VirusExit
    89                                  
    90                                  fail:
    91 00000064 E882000000              		call get_my_loc
    92 00000069 83E937                  		sub ecx, next_i-Failstr
    93                                  		write 2, ecx, 12
    93                              <1>  syscall3 4, %1, %2, %3
    93 0000006C BA0C000000          <2>  mov edx, %4
    93 00000071 89C9                <2>  mov ecx, %3
    93 00000073 BB02000000          <2>  mov ebx, %2
    93 00000078 B804000000          <2>  mov eax, %1
    93 0000007D CD80                <2>  int 0x80
    94                                  VirusExit:
    95                                         exit 0
    95                              <1>  syscall1 1, %1
    95 0000007F BB00000000          <2>  mov ebx, %2
    95 00000084 B801000000          <2>  mov eax, %1
    95 00000089 CD80                <2>  int 0x80
    96                                  	
    97 0000008B 454C46657865633273-     FileName:	db "ELFexec2short", 0
    97 00000094 686F727400         
    98 00000099 546865206C61622039-     OutStr:		db "The lab 9 proto-virus strikes!", 10, 0
    98 000000A2 2070726F746F2D7669-
    98 000000AB 72757320737472696B-
    98 000000B4 6573210A00         
    99 000000B9 70657268617073206E-     Failstr:        db "perhaps not", 10 , 0
    99 000000C2 6F740A00           
   100 000000C6 6572726F7220696E20-     FailOpen:   	db "error in openning", 10 , 0
   100 000000CF 6F70656E6E696E670A-
   100 000000D8 00                 
   101 000000D9 6572726F72206E6F74-     FailNotELF: 	db "error not an elf", 10 , 0
   101 000000E2 20616E20656C660A00 
   102                                  	
   103                                  get_my_loc:
   104 000000EB E800000000              	call next_i
   105                                  next_i:
   106 000000F0 59                      	pop ecx
   107 000000F1 C3                      	ret	
   108 000000F2 [7F000000]              PreviousEntryPoint: dd VirusExit
   109                                  virus_end:
